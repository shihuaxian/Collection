1. java 反射机制 http://blog.csdn.net/nieweilin/article/details/5908165
定义：在运行状态中，对于任意一个类,都能知道这个类的所有属性和方法；对于任意对象，都能够调用它的任意方法；
这种动态获取的信息以及动态调用对象的方法功能称为反射。

2.反射机制如何实现
java.lang.Class这个类 ,java 程序运行时，系统一直对所有对象进行所谓的运行时标识。这项信息记录每个对象所属的类。虚拟机通常使用运行时
类型信息选择正确方法执行，用来保存这些类型信息的是Class类.

也就是说ClassLoader找到了需要调用的类时(java 为了调控内存的调用消耗，类的加载都需要在需要时再进行，很抠但是很有效)，就会加载它，
然后根据.class文件内记载的类信息来产生一个与该类相联系的独一无二的对象，该class对象记载了该类的属性和方法。以后jvm要产生该类的实例，
就是根据内存中存在的该class类所记载的信息（Class对象应该和我所了解的其他类一样会在堆内存内产生、消亡）来进行.

java 中的Class类对象是可以人工自然性的（也就是说开放的）得到的（虽然你无法像其他类一样运用构造器来得到它的实例，因为
Class对象都是jvm产生的。不过话说回来，客户产生的话也是无意义的），而且，更伟大的是，基于这个基础，java实现了反射机制。

获取Class对象的三种方法：
1.通过Object类的getClass()方法，Class c1 = new String("").getClass();
2.通过Class类的静态方法-forName()来实现，Class c2 = Class.forName("");
3.如果T是一个已经定义类型的话，在java中，它的.class文件名，T.class就代表了与其匹配的Class对象，例如：
Class c3 = Manager.class; Class c4 = int.class; Class c5 = Double[].class;

这里需要解释一下3: 请记住一句话，在java中一切皆对象。也就是说，基本类型int float等也会在jvm的内存池像其他类型一样中生成一个Class对象，
而数组等组合型数据类型也是会生成一个Class对象的，而且更令人惊讶的是，java中数组的本来面目其实就是某个类，惊讶
中的惊讶是，含有相同元素的相同维数的数组还会共同享用同一个Class对象！其实根据我的臆想，数组的length性质应该就保存在这个Class
对象里面。

android  中的反射 http://www.apkbus.com/android-1259-1-1.html

studio  http://www.android-studio.org/index.php/docs/guide/135-gradle-2

1. AsyncTask 定义了三种范型类型 Params，Progress和Result
Params 启动任务执行的输入参数，比如HTTP请求的URL
Progress 后台任务执行的百分比
Result 后台执行任务最终的返回结果, 比如String
最少重写两个方法
.doInBackground(Params ...)后台执行，比较耗时的操作都可以放在这里。这里不能操作UI。此方法在后台线程执行，
完成任务的主要工作，通常需要较长的时间。在执行过程中可以调用publicProgress(Progress...)来更新任务进度
.onPostExecute(Result)相当于Handler处理UI方式，在这里可以使用在doInBackground得到的结果处理操作UI。此方法在主线程
执行，任务执行的结果作为此方法的参数返回。

三个参数的意义
第一个参数：传入doInBackground()方法的参数类型
第二个参数：传入onProgressUpdate()方法的参数类型,在doInBackground方法当中,
 每次调用publishProgress方法都会触发onProgressUpdate执行  
第三个参数：doInBackground()的返回值，和onPostExecute(String result)参数

2. android:duplicateParentState
实例：比如RelativeLayout下有两个TextView,这两个TextView具有不同的颜色值，现在要的效果是,
当这个RelativeLayout 被点击的时候，整个item有高亮背景，同时两个TextView要变色。
就是父控件响应点击事件，子view不响应点击事件，但是颜色要随着点击而发生变化。
这样就用到了android:duplicateParentState

android:dulplicateParentState
”如果设置此属性，将直接从父容器中获取绘图状态（光标，按下等）。 注意仅仅是获取绘图状态，而没有获取事件，
也就是你点一下LinearLayout时Button有被点击的效果，但是不执行点击事件“

3. TextView 加下划线 
textView.getPaint().setFlags(Paint.UNDERLINE_TEXT_TAG);
textView.getPaint().setAntiAlias(true);

textView 底线focus不一样的颜色，是用_9.png 来变换；textView闪标 android:textCursorDrawable = "";来修改
SpannableString 来设置字体颜色，下划线，超链接


4. 命令模式 http://www.cnblogs.com/java-my-life/archive/2012/06/01/2526972.html

命令模式属于对象的行为模式。命令模式又称为行动(Action)模式或交易(Transaction)模式.
命令模式把一个请求或者操作封装到一个对象中。命令模式允许系统使用不同的请求把客户端参数化，
对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。

5. 

bindApplication
activity start
Looper n-1 Thread
HardWareRender
relayoutWindow

6. 线程池
(1.)线程池管理器(ThreadPool):用于创建并管理线程池,包括创建线程池，销毁线程池，添加新任务。
(2.)工作线程(PoolWorker)：线程池中的线程，在没有任务时处于等待状态，可以循环的执行任务。
(3.)任务接口(Task):每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，
任务执行完后的收尾工作，任务的执行状态等。
(4.)任务队列(taskQueue):用于存放没有处理的任务，提供一种缓存机制。
